user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  # log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
  #                   '$status $body_bytes_sent "$http_referer" '
  #                   '"$http_user_agent" "$http_x_forwarded_for"';

  log_format upstreamlog '[$time_local] $remote_addr - $remote_user - $server_name to: $upstream_addr: $request upstream_response_time $upstream_response_time msec $msec request_time $request_time';


  error_log /var/log/nginx/error.log debug; # todo testing remove me not for production use
  access_log  /var/log/nginx/access.log upstreamlog;
  # access_log  /var/log/nginx/access.log  main;

  sendfile        on;
  #tcp_nopush     on;

  keepalive_timeout  65;

  #gzip  on;

  server {
    # listen on port 80
    listen 80;

    root   /usr/share/nginx/html;
    index  index.html index.htm;

    # location ~* ^.+\.js$ {
    #     LOCATION_SUB_FILTER
    #     sub_filter_once off;
    #     sub_filter_types *;
    # }

    # location engine {
    #   # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #   proxy_set_header X-Frame-Options SAMEORIGIN;
    #   proxy_pass http://matching-engine:8081;
    # }

    location /engine/ {
      proxy_http_version 1.1;
      # proxy_redirect     off;
      proxy_set_header Host $host;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_pass http://matching-engine:8081/;
    }

    location /ethereum {
      # proxy_redirect     off;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header Host $host;
      proxy_http_version 1.1;
      proxy_set_header Connection "";
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_read_timeout 86400;
      proxy_pass http://ethereum:8545/;
      # proxy_set_header Upgrade $http_upgrade;
      # proxy_set_header Connection "upgrade";
    }

    # location /ethereum/ws/ {
    #   proxy_pass http://ethereum:8546/;
    #   proxy_redirect     off;
    #   proxy_http_version 1.1;
    #   proxy_set_header Upgrade $http_upgrade;
    #   proxy_set_header Connection "upgrade";
    #   proxy_set_header Host $host;
    #   proxy_set_header   X-Real-IP $remote_addr;
    #   proxy_read_timeout 86400;
    # }

    location / {
        # First attempt to serve request as file, then
        # as directory, then fall back to redirecting to index.html
        try_files $uri $uri/ /index.html;
    }

    # Media: images, icons, video, audio, HTC
    location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
      expires 1M;
      add_header Cache-Control "public";
    }

    # Javascript and CSS files
    location ~* \.(?:css|js)$ {
        try_files $uri =404;
        expires 1y;
        add_header Cache-Control "public";
    }

    # Any route containing a file extension (e.g. /devicesfile.js)
    location ~ ^.+\..+$ {
        try_files $uri =404;
    }
  }

  # server {
  #   listen 8081;

  #   location /engine {
  #     proxy_pass http://matching-engine:8081;
  #     proxy_http_version 1.1;
  #     proxy_set_header Upgrade $http_upgrade;
  #     proxy_set_header Connection "upgrade";
  #     proxy_set_header Host $host;
  #     proxy_set_header   X-Real-IP $remote_addr;
  #     proxy_read_timeout 86400;
  #   }
  # }

  # server {
  #   listen 8545;

  #   location /ethereum {
  #     proxy_pass http://ethereum:8545;
  #     proxy_set_header Host $host;
  #     proxy_set_header   X-Real-IP $remote_addr;
  #     proxy_read_timeout 86400;
  #   }
  # }

  # server {
  #   listen 8546;

  #   location /ethereum/ws {
  #     proxy_pass http://ethereum:8546;
  #     proxy_http_version 1.1;
  #     proxy_set_header Upgrade $http_upgrade;
  #     proxy_set_header Connection "upgrade";
  #     proxy_set_header Host $host;
  #     proxy_set_header   X-Real-IP $remote_addr;
  #     proxy_read_timeout 86400;
  #   }
  # }
}












# # auto detects a good number of processes to run
# worker_processes auto;

# #Provides the configuration file context in which the directives that affect connection processing are specified.
# events {
#     # Sets the maximum number of simultaneous connections that can be opened by a worker process.
#     worker_connections 8000;
#     # Tells the worker to accept multiple connections at a time
#     multi_accept on;
# }


# http {
#     # what times to include
#     include       /etc/nginx/mime.types;
#     # what is the default one
#     default_type  application/octet-stream;

#     # Sets the path, format, and configuration for a buffered log write
#     log_format compression '$remote_addr - $remote_user [$time_local] '
#         '"$request" $status $upstream_addr '
#         '"$http_referer" "$http_user_agent"';

#     server {
#         # listen on port 80
#         listen 80;
#         # save logs here
#         access_log /var/log/nginx/access.log compression;

#         root   /usr/share/nginx/html;
#         index  index.html index.htm;

#         location ~* ^.+\.js$ {
#             LOCATION_SUB_FILTER
#             sub_filter_once off;
#             sub_filter_types *;
#         }

#         location / {
#             # First attempt to serve request as file, then
#             # as directory, then fall back to redirecting to index.html
#             try_files $uri $uri/ /index.html;
#         }

#         # Media: images, icons, video, audio, HTC
#         location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
#           expires 1M;
#
#           add_header Cache-Control "public";
#         }

#         # Javascript and CSS files
#         location ~* \.(?:css|js)$ {
#             try_files $uri =404;
#             expires 1y;
#
#             add_header Cache-Control "public";
#         }

#         # Any route containing a file extension (e.g. /devicesfile.js)
#         location ~ ^.+\..+$ {
#             try_files $uri =404;
#         }
#     }

#     server {
#       listen 8081;

#       location /engine {
#         proxy_pass http://engine;
#         proxy_http_version 1.1;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection $connection_upgrade;
#       }
#     }

#     server {
#       listen 8545;

#       location /ethereum {
#         proxy_pass http://ethereum;
#       }
#     }

#     server {
#       listen 8546;

#       location /ethereum {
#         proxy_pass http://ethereum;
#         proxy_http_version 1.1;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection $connection_upgrade;
#       }
#     }
# }